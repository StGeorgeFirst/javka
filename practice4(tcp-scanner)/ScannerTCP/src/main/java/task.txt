Задача
Разработать приложение сканер TCP-портов.
Необходимо реализовать:
	1. Сканирование методом установления соединения
	2. Список портов может быть указан в виде:
		а. диапазона
		b. перечисления портов
		c. в смешанном виде
	3. Список хостов может быть указан в виде:
		a. диапазона ip адресов
		b. перечисления ip адресов
	4. Результат сканирования должен сохраняться в файл в формате JSON для возможности дальнейшего анализа другими программами.
	5. Сканирование дожно вестисть в случайном порядке.

По-возможности сделать многопоточное сканирование для различных хостов.
Реализовать возможность указание максимального кол-ва потоков.

Ожидаемый результат
Примеры запуска программы:
Сканирование одного порта
scan -h 192.168.88.1 -p 139

Сканирование множества хостов и портов
scan -h 192.168.88.1-255, 192.168.1.1, 192.169.1.1 -p 80, 443, 8080, 3000-5000

Сканирование множества хостов и портов одновременно 12-ю потоками
scan -h 192.168.88.1-225 -p 1-10000 -t 12

Рекомендуется использовать библиотеки apache commons

По задаче:
    - TCP как работает
    - tcp dump, wireshark - утилиты для просмотра трафика
    - sync
    - ThreadPool
    - synchronized
    - volatile


По решению
приложение SCANNER
list pair {ip/port} - есть данный список у приложение и мы устанавливаем коннект со всеми адресами из списка, если коннект есть то
записываем в JSON
"host" : [ip:port]
"res" : [true/false]

1) Single-Thread solution
    1.1. чтение из командной строки - обр. параметров запуска (ключи -h, -p, -t)
    работаем с List (ArrayList) адресов address(ip/port)

    1.2. писать в json

    1.3. работа с TCP (connect, созд. класса TCP-клиента, созд. сетевых объектов)

    1.4. Random scan

    1.5. Писать в логи (log4j)
    (что писать:
                - fail to start
                - error stackoverflow
                - пишем в лог стек вызовов
                - не могу создать файл json

2) Multi-Thread solution
из разных thread будем писать в лог (должна быть в логе хар-ка потока)
    2.1. синхронизация лога
    2.2. синхронизация результата в JSON
    Плохое решение 2.2. через volatile/synchronized
    Хорошее решение 2.2. посмотреть синхронизированные коллекции (синхронный ArrayList)
    пишем параллельно в синхронизированный ArrayList и потом с него в JSON
    2.3. ThreadPool - создаем и его используем



Требование про случайный порядок
например диапазон 1-5
есть list 1->2->3->4->5
с помощью random выбираем порт и осуществляем коннект (просто требование задачи)
